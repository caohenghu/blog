(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{281:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("blockquote",[a("p",[t._v("在使用 "),a("code",[t._v("git")]),t._v(" 提交 "),a("code",[t._v("commit")]),t._v(" 时，最好有一个规范，这样可以很方便地生成 "),a("code",[t._v("changelog")]),t._v("。")])]),t._v(" "),a("h2",{attrs:{id:"commit-msg-规范"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commit-msg-规范"}},[t._v("#")]),t._v(" commit msg 规范")]),t._v(" "),a("ol",[a("li",[t._v("安装依赖包")])]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 强制commit msg需符合规范才能提交")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" -D @commitlint/config-conventional @commitlint/cli husky\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 用来生成CHANGELOG.md")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" -D conventional-changelog-cli\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("在"),a("code",[t._v("package.json")]),t._v("里添加配置")])]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"scripts"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"changelog"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"conventional-changelog -p angular -i CHANGELOG.md -s -r 0"')]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"husky"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"hooks"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"commit-msg"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"commitlint -E HUSKY_GIT_PARAMS"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"commitlint"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"extends"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"@commitlint/config-conventional"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("生成"),a("code",[t._v("CHANGELOG.md")])])]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 执行script里的代码")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" changelog\n")])])]),a("h2",{attrs:{id:"便捷输入-commit-msg"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#便捷输入-commit-msg"}},[t._v("#")]),t._v(" 便捷输入 commit msg")]),t._v(" "),a("blockquote",[a("p",[t._v("如果对规范比较了解，可以不使用这个工具")])]),t._v(" "),a("ol",[a("li",[t._v("安装依赖包")])]),t._v(" "),a("div",{staticClass:"language-sh extra-class"},[a("pre",{pre:!0,attrs:{class:"language-sh"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 在全局安装后可以使用 git cz 来代替 git commit，如果装在本地则需要使用 yarn git-cz")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" global "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" commitizen\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 安装后就有友好提示了")]),t._v("\n$ "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("yarn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" -D cz-conventional-changelog\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[t._v("在"),a("code",[t._v("package.json")]),t._v("里添加配置")])]),t._v(" "),a("div",{staticClass:"language-json extra-class"},[a("pre",{pre:!0,attrs:{class:"language-json"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"config"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"commitizen"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token property"}},[t._v('"path"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"cz-conventional-changelog"')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("ol",{attrs:{start:"3"}},[a("li",[t._v("所有的"),a("code",[t._v("commit msg")]),t._v("类型，使用的是"),a("code",[t._v("angular")]),t._v("规范")])]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("feat:")]),t._v(" A new feature")]),t._v(" "),a("li",[a("strong",[t._v("fix:")]),t._v(" A bug fix")]),t._v(" "),a("li",[a("strong",[t._v("docs:")]),t._v(" Documentation only changes")]),t._v(" "),a("li",[a("strong",[t._v("style:")]),t._v(" Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)")]),t._v(" "),a("li",[a("strong",[t._v("refactor:")]),t._v(" A code change that neither fixes a bug nor adds a feature")]),t._v(" "),a("li",[a("strong",[t._v("perf:")]),t._v(" A code change that improves performance")]),t._v(" "),a("li",[a("strong",[t._v("test:")]),t._v(" Adding missing tests or correcting existing tests")]),t._v(" "),a("li",[a("strong",[t._v("build:")]),t._v(" Changes that affect the build system or external dependencies (example scopes: gulp, broccoli, npm)")]),t._v(" "),a("li",[a("strong",[t._v("ci:")]),t._v(" Changes to our CI configuration files and scripts (example scopes: Travis, Circle, BrowserStack, SauceLabs)")]),t._v(" "),a("li",[a("strong",[t._v("chore:")]),t._v(" Other changes that don't modify src or test files")]),t._v(" "),a("li",[a("strong",[t._v("revert:")]),t._v(" Reverts a previous commit")])])])}),[],!1,null,null,null);s.default=e.exports}}]);